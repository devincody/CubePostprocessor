#!/usr/bin/env python3.5

"""
# CubePostprocessor

Just a post processor make life easier with Cube 2 from 3DSystems.

Support KISSlicer 1.5b, Cura 15.04.04 and Slic3r 1.2.9.

With all slicer g-code, it cleans the file after processing (removes comments and extra lines, makes sure EOL is Windows)

With KISS
 - allows for solid and infill extrusion amount tuning

With Cura
 - change first layer temp 10 C higher than rest of the print

With Slicer
 - converts Makerware (Makerbot) style g-code to Cube (BfB) format

Disclaimer: i'm not responsible if anything, good or bad, happens due to use of this script.

Version 0.7
"""


import logging
import os
import platform
import subprocess
import sys
import argparse

from CubePostprocessor.slicer_cura import CuraPrintFile
from CubePostprocessor.slicer_kisslicer import KissPrintFile
from CubePostprocessor.slicer_simplify3d import Simplify3dPrintFile
from CubePostprocessor.slicer_slic3r import Slic3rPrintFile
from CubePostprocessor import utils
from CubePostprocessor import CODEX_DIR

fmt = logging.Formatter(fmt="%(asctime)s - %(name)s - %(levelname)s - %(message)s")
filehandler = logging.FileHandler("process.log")
filehandler.setFormatter(fmt)
streamhandler = logging.StreamHandler(stream=sys.stdout)
streamhandler.setFormatter(fmt)
log = logging.getLogger("Cubifier")
log.setLevel(logging.INFO)
log.addHandler(filehandler)
log.addHandler(streamhandler)


def detect_file_type(gcode_file):
    with open(gcode_file, 'r') as gf:
        line1 = gf.readline()
        if line1.startswith('; KISSlicer'):
            log.info("Detected KISSlicer format")
            return KissPrintFile
        elif line1.startswith('; CURA'):
            log.info("Detected Cura format")
            return CuraPrintFile
        elif line1.startswith('; generated by Slic3r'):
            log.info("Detected Slic3r format")
            return Slic3rPrintFile
        elif line1.startswith('; G-Code generated by Simplify3D(R)'):
            log.info("Detected Simplify3D format")
            return Simplify3dPrintFile
        else:
            log.error("No supported gcode file detected. Is comments enabled on Kisslicer or '; CURA' header added to Cura start.gcode?")
            exit(1)


def run_codex(result_file, keep_intermediary = False):
    # Check for compatable OS
    if (not utils.is_windows() and not utils.is_wsl()):
        log.info("OS not supported by CodeX")
        return    

    # Check to make sure CodeX64.exe was installed properly
    codex_path = os.path.join(CODEX_DIR, "CodeX64.exe")
    if not os.path.exists(codex_path):
        log.info("We tried installing CodeX64.exe in {}, but it is not there".format(codex_path))
        return
    log.info("Found CodeX, encoding file. This might take a while...")

    # OS-specific preparation
    if utils.is_windows():
        log.info("Detected Windows")
        win_result_file = result_file
    elif utils.is_wsl():
        log.info("Detected WSL")

        # Convert WSL paths to Windows Paths
        win_result_file = subprocess.check_output(["wslpath", "-w", result_file])
        try:
            win_result_file = win_result_file.decode("utf-8")
        except (UnicodeDecodeError, AttributeError):
            pass
        if (win_result_file[-1] == '\n'):
                win_result_file = win_result_file[:-1]
    else:
        log.info("No supported platform detected")

    # Generate .cube paht name
    _dir, fname = os.path.split(win_result_file)
    name, ext = os.path.splitext(fname)
    cube_file = os.path.join(_dir,  name + ".cube")

    codex_args = [codex_path,
        "CubePro",
        "EnCode",
        win_result_file,
        cube_file]
    subprocess.call(codex_args)
    log.info("Wrote new file: {}".format(cube_file))
    if not keep_intermediary:
        os.remove(result_file)
        log.info("Removed intermediatry file: {}".format(result_file))
    return 


def main():
    parser = argparse.ArgumentParser(description='Postprocess bfb files for Cube 2')
    parser.add_argument('-k', '--keep', action='store_true', help = 'keep intermediary bfb file')
    parser.add_argument('-d', '--debug', action='store_true', help = 'enable debugging mode')
    parser.add_argument('filename')
    args = parser.parse_args()

    if(args.debug):
        print(args)

    print_type = detect_file_type(args.filename)
    pf = print_type(debug=args.debug)
    result_file = pf.process(args.filename)
    run_codex(result_file, args.keep)


if __name__ == "__main__":
    main()
